-- 12월 18일
-- 저번주 복습

-- join을 이용해서 n개의 테이블을 묶어서 결과를 추출
-- emp(사원), dept(부서) 테이블
-- emp에 있는 deptno와 dept에 있는 deptno를 이용해서 두 테이블을 join할 수 있음
-- 부서번호가 20번인 사원의 이름, 직책, 입사날짜, 부서이름, 부서위치 조회

select e.ename, e.job, e.hiredate, d.dname, d.loc
from emp as e inner join dept as d on e.deptno = d.deptno
where e.deptno = 20

-- join은 from절로 간주

-- self join
-- 하나의 테이블에서 join
-- emp에 mgr번호는 사수의 사원번호인 empno임
-- mgr과 empno를 이용해서 사원의 사수이름을 출력해보자

select b.ename as 부사수이름, b.empno as 부사수번호, b.mgr as 사수번호, s.ename as 사수이름
from emp as b inner join emp as s on b.mgr = s.empno


-- outer join(left, right)
-- 대형 프로젝트에서 outer join 정말 많이 사용함
-- left outer join : A 테이블에 있고 B 테이블에 없는 데이터 조회
-- right outer join : A 테이블에 없고 B 테이블에 있는 데이터 조회
-- inner join은 교집합이다.
-- 사원이 없는 부서번호와 부서이름, 근무지를 출력하고자 한다.

select d.deptno, d.dname, d.loc
from emp as e right outer join dept as d on e.deptno = d.deptno
where e.deptno is null

-- 보통 실무에서 where절로 is null 체크하진 않음!

-- 문제 1. 직책이 manager인 사원의 번호와 이름, 부서위치를 출력하시오


select e.empno, e.ename, d.loc
from emp as e right outer join dept as d on e.deptno = d.deptno
where (select deptno from emp where deptno = 40) or e.job = 'manager'

-- 서브 쿼리는 하나의 쿼리 문장 내에 포함된 또 하나의 쿼리 문장
-- 서브 쿼리는 ()를 묶어서 실행한다.
-- 서브 쿼리가 먼저 실행 된 후, 외부 쿼리와 비교 / 연산 된다.
-- 서브 쿼리가 가능한 곳
-- select, from(=join), where, having, order by, insert, update
-- select, from(=join), where 절에 서브쿼리를 종종 사용하며, from절에 서브쿼리를 많이 사용한다.
-- 서브쿼리는 언제 사용할까?
-- 1. 데이터를 필터링할 때
-- 2. 통계 데이터를 추출할 때

-- select 서브쿼리 (스칼라 서브쿼리)
-- ex) select 절에 서브쿼리 이용해보기
select (select count(*) from emp) as "사원 수", (select sum(sal) from emp) as "사원 총 급여" from emp

-- from 서브쿼리 (인라인 뷰)
-- ex) from절에 서브쿼리 이용
-- sql 실행 순서
-- 서브쿼리 먼저 실행! 서브쿼리(from > where > select) > from > select
select * from emp as e inner join (select empno from emp where job = 'manager') as manager_emp
on e.empno = manager_emp.empno

-- where 서브쿼리 (중첩 서브쿼리)
-- ex) where절에 서브쿼리 이용
-- 문제) 급여를 가장 많이 받는 사원의 이름과 급여 조회
select ename, sal from emp
where sal in (select max(sal) from emp)

-- (중요) where절에 서브쿼리 결과가 여러 행일 때는 =가 아니라 in을 사용해야 한다!
-- 다중 행 : in
-- 단일 행 : =
-- exists, not exists는 다음 시간에
select ename, sal from emp
where sal in (select sal from emp where sal > 2000)

-- 나머지는 별도의 이름이 없음

-- select(조회), insert(저장), delete(제거), update(수정)
-- 신입 개발자는 insert(Create), select(Read), update(Update), delete(Delete)만 잘하면 끝!
-- 'CRUD'만 잘하면 끝!
-- 데이터베이스 용어로는 DML(Data Manipulation Language, 데이터 조작언어)

-- 사원번호, 사원이름 추가
insert into emp (empno, ename) values (8000, "황정민");
insert into emp (empno, ename) values (8001, "정우성");

select * from emp

-- 황정민, 정우성 입사 날짜와 급여 update하기
update emp set sal = 3000, hiredate = now() where empno = 8000

update emp set sal = 4000, hiredate = now() where empno = 8001

-- 삭제
-- 황정민 데이터 삭제
delete from emp where empno = 8001

-- delete도 where절을 사용하지 않으면 전체 행이 삭제된다.
-- 실제사건) 신입이 중요 데이터를 delete로 날린 적이 있음... (where절을 사용하지 않아서)

-- 전체 행 삭제
delete from emp;

-- 전체 행을 삭제할 때는 delete를 사용하는 게 아니라 truncate를 이용해서 삭제한다.
-- truncate
truncate table emp;

-- truncate와 delete 성능차이
-- delete는 한줄 한줄 지우는 반면 truncate는 통째로 지운다.
-- (중요) update : 데이터베이스(mysql, oracle 등등)에서 update란 존재하지 않는다.
-- 뭔 개소리냐?
-- 실제 데이터베이스는 update문을 update하는 게 아니라 delete한 다음에 insert 하는거임.

select * from emp

-- 1. 사원번호가 7369인 사원의 급여를 기존 급여에 20%를 인상하시오. (update 이용)
update emp set sal = sal*1.2 where empno = 7369

-- 2. 사원번호가 7839, 7499인 사원의 보너스를 200씩 지급하시오. (update 이용)
update emp set comm = 200 where empno = 7839 and 7499

-- 3. 사원번호 5000, 사원이름 현상원, 직업 MANAGER, 입사날짜 오늘날짜로 사원을 추가하시오. (insert 이용)
insert into emp (empno, ename, job, hiredate) values (5000, "현상원", "MANAGER", now())

-- 4. 사원번호 5001, 사원이름 아이유, 직업 ANALYST, 입사날짜 오늘날짜로 사원을 추가하시오. (insert 이용)
insert into emp (empno, ename, job, hiredate) values (5001, "아이유", "ANALYST", now())

-- 5. 사원이름이 아이유인 사원의 급여 3000, 보너스 100을 지급하시오. (update 이용)
update emp set sal = 3000, comm = 100 where ename = "아이유"

-- 6. 사원이름이 현상원이고 직업이 MANAGER 사원의 사수번호를 7839로 수정하시오. (update 이용)
update emp set mgr = 7839 where ename = "현상원"

-- 7. 사원번호 5000, 5001인 사원을 삭제하시오. (delete 이용)
delete from emp where empno = 5000

delete from emp where empno = 5001
-- 8. 다음 중 데이터베이스 시스템 언어의 종류와 해당하는 명령어를 바르게 연결한 것을 2개 고르시오. 	(1, 2)
--    1. DML - SELECT						
--    2. TCL - COMMIT
--    3. DCL - DROP
--    4. DML - ALTER

-- 9. 다음 중 NULL의 설명으로 가장 부적절한 것은?	(3)
--    1. 모르는값을 의미한다.
--    2. 값의 부재를 의미한다.
--    3. 공백 문자(Empty String) 혹은 숫자 0을 의미한다.
--    4. NULL과 모든 비교는 알 수없음(Unknown)을 반환한다.

-- 10. 서브쿼리가 가능하지 않는 곳은?		(4)
--    1. SELECT
--    2. FROM
--    3. WHERE
--    4. GROUP BY