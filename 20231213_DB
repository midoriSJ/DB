-- group by, having
-- group by : 컬럼 그룹핑 할때
-- having : 그룹핑한 결과를 필터링할 때

select sum(sal) as "부서별 급여 합", deptno from emp group by deptno
having sum(sal) >= 9000

-- * query 순서 * 
-- 실무 혹은 sql 시험 때 아래 순서에 맞게 쿼리를 읽으면 됨!
-- from < where < group by < having < select < order by

-- 12월 13일 수업내용
-- round, truncate
-- round : 반올림
-- truncate : 특정 자리수 버림
-- dual : 가상 테이블 (연습용)
select round(500.8) as "round" from dual

-- round(N, n) 형태로 지정하면 N을 n자리까지 반올림한다.
select round(500.56789, 4) from dual

-- truncate(N, n) 형태로 지정하면 N을 n자리까지 출력
-- N에 소수 대입 후 n = 0으로 지정하면 정수형만 출력한다.
select truncate(1234.56789, 3) from dual

-- 실무에서 round와 truncate는 자주 사용하지 않는다.

-- if(조건문, true일 때, false일 때)
select if(sal <= 3000, 'A', 'B'), sal from emp

-- switch case when(A) then a when(B) then b else c end
-- A 조건일 때 a 출력, B 조건일 때 b 출력, 아니면 c 출력 그리고 끝

select case when(sal between 1000 and 2000) then 'A'
when (sal between 3000 and 5000) then 'B' else 'C' end, sal from emp

-- if, switch문 실무에서 잘 사용 안함

-- 현재 시각 출력하기 (실무에서 매우 자주 사용됨)
select date_format(now(), "%Y-%m-%d") as "오늘은?" from dual

select date_format(now(), "%H:%i:%s") as "지금 시각은?" from dual

-- join (매우 중요!)
-- join은 N개의 테이블을 서로 묶어서 하나의 결과를 만들어 내는 것을 의미
-- 즉, dept(부서 테이블)과 emp(사원 테이블)을 묶어서 결과를 조회하고 싶을 때 join을 사용
-- 테이블을 한 개로 관리하면 column 수가 늘어나고 이는 데이터베이스 성능 저하로 이어짐
-- 실무에선 여러 테이블을 나누어 관리하며, join을 이용해 테이블을 묶는다.
-- 이는 관계형 데이터베이스(RDBMS) == MySQL에 큰 특징 중 하나이다.
-- 번외) join이 있으면 관계형 데이터베이스(MySQL, Oracle, ...), join이 없으면 NoSQL(MongoDB, DynamoDB, ...)!

-- 부서 테이블에서 부서번호 조회
-- 사원 테이블에서 부서번호 조회

-- 사원을 부서이름과 근무지 조회
-- 부서 이름과 근무지는 dept 테이블에 존재
-- deptno를 이용해서 테이블을 묶을 예정

-- inner join
select e.ename as "사원 이름", e.job as "사원 직책", d.dname as "부서 이름", d.loc as "근무지", e.deptno as "부서 번호"
from emp as e inner join dept as d on e.deptno = d.deptno


-- inner join과 on절은 from절에 속한다.
-- from (inner join, on) < where < group by < ...
-- 교집합 컬럼(deptno)은 이름만 같다고 join이 되는 게 아님. 데이터 타입이 같아야 한다.
-- emp에 있는 deptno와 dept에 있는 deptno는 데이터 타입이 같다.

-- 문제 1. 부서 번호가 10번인 사원들의 이름, 입사 날짜, 부서이름 조회
select e.ename as "사원 이름", e.hiredate as "입사 날짜", d.dname as "부서 이름" from emp as e inner join dept as d on e.deptno = d.deptno

-- 문제 2. job이 manager인 사원의 번호, 근무지 조회
select e.empno as "사원 번호", d.loc as "근무지" from emp as e inner join dept as d where job = 'manager'

-- 문제 3. 급여가 2000 이상인 사원의 번호, 이름, 부서 번호, 부서 이름, 근무지 조회
select e.empno as "사원 번호", e.ename as "사원 이름", e.deptno as "부서 번호", d.dname as "부서 이름", d.loc as "근무지"
from emp as e inner join dept as d on e.deptno = d.deptno


-- inner join (내부 조인, 실무에선 조인이라고 함)
-- self join
-- emp 테이블에 사수번호 mgr와 사원번호 empno는 교집합
-- from 먼저 실행하기 때문에 select절에 from절에 사용한 별칭을 사용할 수 있다. (매우 중요!)
select busasu.empno as "사원 번호", busasu.ename as "부사수 이름", sasu.empno as "사수 사원번호", sasu.ename as "사수 이름"
from emp as busasu inner join emp as sasu on busasu.mgr = sasu.empno

-- 문제 1. 사원 보너스가 null이 아닌 사원 이름, 사원의 사수 이름 조회
select b.ename as "사원 이름", s.ename as "사수 이름" from emp as b inner join emp as s on b.mgr = s.empno
where b.comm is not null

-- 문제2. 부서번호(부사수)가 20번인 사원의 사원 번호, 사원 이름, 사수 이름 조회
select b.empno as "사원 번호", b.ename as "사원 이름", s.ename as "사수 이름"
from emp as b inner join emp as s on b.mgr = s.empno where b.deptno = 20


-- self join, inner join
-- 여러 join 사용하기 (아주 중요! // 실무에선 join을 3 ~ 4개 정도 사용하기 때문)
-- select _ from A as a inner join B as b on _ inner join C as c on _ ... 형식으로 사용
select b.ename as "부사수 이름", b.deptno as "부사수 부서번호", d.dname as "부사수 부서이름", s.ename as "사수 이름" from emp as b
inner join dept as d on b.deptno = d.deptno inner join emp as s on b.mgr = s.empno


-- 실무에서 상당히 많이 사용하는 join
-- right join, left join -> 이 둘을 outer join이라고 함
-- 대형 SI 프로젝트에서 외부 조인(outer join)을 정말 많이 사용함

-- 문법
select 컬럼이름 from 테이블이름 as 별칭
right join 테이블 이름 as 별칭
on 별칭.컬럼 = 별칭.컬럼

select 컬럼이름 from 테이블이름 as 별칭
left join 테이블 이름 as 별칭
on 별칭.컬럼 = 별칭.컬럼

-- 언제 사용할까?
select deptno from dept

-- distinct : 중복 제거
-- distinct와 group by
-- distinct는 중복제거
-- group by는 컬럼 그룹핑(중복 제거)
-- 차이점? group by는 그룹핑(중복 제거) 후 정렬, distinct는 중복제거만 함
select distinct deptno from emp

-- 요구사항 => emp와 deptno join 할 때 40번 부서도 이름과 위치를 알고 싶다!
-- 이럴 때 outer join을 사용함

-- emp엔 없고 dept에 있을 때 emp -> dept join 해서 right join
select e.ename as "사원 이름", d.dname as "부서 이름", d.deptno as "부서 번호" from emp as e
right join dept as d on e.deptno = d.deptno
where e.ename is null or e.deptno = 40

-- 위 join 상태에서 40번 부서만 출력하기

-- dept엔 있고 emp엔 없을 때 dept <- emp join 해서 left join
-- select from dept as d left join emp as e

### 12월 13일 SQL 문제 🎅

-- 1. 사원이름, 사원직책, 사원급여 조회.
select ename, job, sal from emp

-- 2. 사수번호가 7839인 사원 번호, 이름, 입사날짜 조회.
select empno, ename, hiredate from emp where empno = 7839

-- 3. 급여가 3000 이하인 사원의 모든 정보 조회.
select * from emp where sal <= 3000

-- 4. 사원이름, 부서번호, 부서이름, 부서 근무지 조회.
select e.ename, e.deptno, d.dname, d.loc from emp as e inner join dept as d on e.deptno = d.deptno

-- 5. 부서별 급여합계, 부서이름 조회.
select sum(e.sal), d.dname from emp as e inner join dept as d on e.deptno = d.deptno
group by e.deptno

-- 6. 부서 근무지가 NEW YORK이고, 직책이 MANAGER인 사원의 이름, 급여 조회.
select e.ename, e.sal from emp as e inner join dept as d on e.deptno = d.deptno
where d.loc = "new york" and e.job = "manager"

-- 7. 1983년 이후 입사한 사원의 보너스가 null이면 100 주고, 사원의 이름, 부서이름, 직업 조회. (미해결)
select e.ename, d.dname, e.job, e.comm from emp as e
inner join dept as d on e.deptno = d.deptno
if (e.comm is null, e.comm + 100, e.comm)
where date_format(e.hiredate, "%Y") >= 1983
-- 8. 부서명이 RESEARCH인 사원의 이름, 급여, 근무 지역 조회.
select e.ename, e.sal, d.loc from emp as e inner join dept as d on e.deptno = d.deptno
where d.dname = 'research'
-- 9. 보너스를 받은 사원 이름, 직책, 급여, 부서명 조회.
select e.ename, e.job, e.sal, d.dname from emp as e inner join dept as d on e.deptno = d.deptno
where e.comm > 0
-- 10. 이름 첫글 A자를 가진 사원 이름, 직책, 부서명, 부서 위치 조회.
select e.ename, e.job, d.dname, d.loc from emp as e inner join dept as d on e.deptno = d.deptno
where e.ename like "A%"
-- 11. 사원명, 사수번호, 사수 이름 조회. 단, 사수가 없는 사원도 포함
select b.ename, b.mgr, s.ename from emp as b inner join emp as s on b.mgr = s.empno

-- 12. 사원명, 사수번호, 사수 이름 조회. 단, 사수가 없는 사원만
select b.ename, b.mgr, s.ename from emp as b inner join emp as s on b.mgr = s.empno
where b.mgr is null

-- 13. 상사번호가 7698인 사원의 이름, 사원번호, 상사번호, 상사이름 조회.

-- 14. 상사보다 먼저 입사한 사원의 사원이름, 사원의 입사일, 상사 이름, 상사 입사일 조회.

-- 15. 업무가 MANAGER이거나 CLERK고 입사날짜가 1982년에 입사한
--     사원의 사원번호, 이름, 급여, 직업, 부서명 조회.

-- 16. 부서별 급여 총합 조회.
--     단, 사원이 존재하지 않는 부서도 포함해서 급여 순으로 내림차순 하시오.

-- 17. 사원 이름, 상사 이름, 사원 부서번호, 사원 부서명, 사원 근무지역 조회.
--     단, 사원이 존재하지 않는 부서번호와 부서명도 조회.

-- 18. 부서 위치가 CHICAGO이고 사수 급여가 5000 미만인
--     사원 번호,사원 이름,사수 번호, 사수 이름, 사수 급여, 부서명 조회.
--     단, 사원의 입사날짜로 오름차순.

-- 19. 입사날짜를 월별로 몇명이 입사했는지 카운트해서 조회.

-- 20. 부서번호, 부서이름, 부서 근무지, 사원 수 조회 단, 사원이 없는 부서도 조회할 수 있게

-- 21. 9월에 입사한 사원의 이름, 번호, 입사날짜 조회.

-- 22. 직업이 SALESMAN 이고 입사날짜가 1981-02-22 이후에 들어온 사원들의 급여 총합, 급여평균 조회.

-- 23. 사원번호 8080, 사원이름 홍길동, 직업 MANAGER, 입사날짜를 오늘날짜로 사원 추가하시오.

-- 26. 사원수가 4명 이상인 부서의 번호, 사원 수, 부서 이름, 부서 위치 조회.


