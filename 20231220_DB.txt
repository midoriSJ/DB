-- 12월 20일
-- MySQL에서 자주 사용하는 문자열 함수 정리
-- 실무에서는 DB 내장함수는 자주 사용하지 않는다. (최대한 안 쓰는 분위기)

-- 1. substring(컬럼명, 시작점, 끝점)
-- substring 특정 범위 문자 자르기
-- 사원이름 첫 번째부터 세 번째까지만 출력하기
-- substr(컬럼명, 시작점, 끝점)으로도 사용 가능!
select substring(ename, 1, 3) from emp;
select substr(ename, 1, 4) from emp;

-- 2. 사원입사날짜 년-월 출력(substring_index())
select substring_index(hiredate, '-', 2) from emp;
-- date_format(hiredate, "%Y-%m")와 비슷하다!

-- 3. 왼쪽으로 3번째 까지만 문자 추출(left())
select left(ename, 3) from emp;

-- 4. 오른쪽으로 3번째 까지만 문자 추출(right())
select right(ename, 3) from emp;

-- 5. 소문자 -> 대문자 자동 변환(upper())
select upper(ename) from emp;

-- 6. 대문자 -> 소문자 자동 변환(lower())
select lower(ename) from emp;

-- 7. 문자열 길이 반환(length())
select length(ename) from emp;

-- 7.1 한글 인식 위해서는 char_length() 사용해야함!
-- why? -> 한글은 3바이트로 인식하기 때문이다.
select char_length("홍길동") from dual;
select char_length("ㅇ") from dual;

-- 문제 1. 프로그래머스 -> 카테고리별 상품 개수 구하기(Lv.2)

-- 8. 날짜와 날짜 사이 일 수 구하기(datediff())
select datediff('2023-12-25', now()) as christmas_count from dual;

-- DML (select, insert, update, delete) => CRUD
-- DDL (create, alter, drop)
-- 회사에서 DDL을 시킨다 -> 회사가 소규모라는 것
-- 오늘은 테이블 생성해보기
-- 데이터 타입(자주 사용하는)
-- 1. integer(int) - 정수
-- 2. bigint(long) - 더 큰 정수
-- 3. bool(boolean) - true / false
-- 4. decimal - 숫자
-- 5. date, timestamp - 날짜, 시간 형식
-- 6. varchar(string) - 문자열
-- 7. blob - 엄청 많은 문자열 저장할 때
-- ex) 게시판 글 내용 저장할 때

-- 테이블 생성
create table student(
	student_id int comment "학생번호",
	name varchar(20) comment "이름",
	addr varchar(50) comment "주소",
	age int comment "나이",
	create_at timestamp default current_timestamp comment "생성 날짜"
);


-- varchar(20) : 20 길이 제한
-- default(기본값) : insert할 때 해당 컬럼 값을 입력하지 않아도 자동으로 값이 세팅됨.

insert into student(student_id, name, addr, age) values(100, "홍길동", "서울 강남구", 20);

select * from student

commit;
-- (매우 중요) commit
-- insert, delete, update 다음에 commit 명령어를 실행해야 한다!
-- commit은 최종 저장을 의미한다.
-- Dbeaver같은 데이터베이스 연동 프로그램은 자동으로 commit 명령어를 날려준다.

-- 테이블 삭제
drop table student;

-- 테이블 생성(여러가지 옵션 추가)
-- primary key는 고유한 값을 가진 컬럼을 지정해 준다.(중복 방지)
-- primary key는 not null과 index 기능도 가지고 있다.
create table student(
	student_id int primary key comment "학번",
	name varchar(20) not null comment "이름",
	addr varchar(50) not null default "일본 도쿄" comment "주소",
	age int default 20 comment "나이",
	create_at timestamp default current_timestamp comment "생성 날짜"
);

-- insert into student(student_id) values(1);
-- 오류 발생 -> name이 not null인데 null값을 넣어버렸기 때문!

insert into student(student_id, name, addr) values(1, "홍길동", "서울 강남구");

select * from student

create table student(
	student_id int auto_increment primary key comment "학번",
	name varchar(20) not null comment "이름",
	addr varchar(50) not null default "일본 도쿄" comment "주소",
	age int default 20 comment "나이",
	create_at timestamp default current_timestamp comment "생성 날짜"
);

-- auto_increment : 증감 연산자
insert into student(name, addr) values("홍길동", "서울 강남구");


-- 문제
-- 테이블 이름 movie
-- 컬럼 이름 movie_id(int), movie_name(varchar), genre(varchar), movie_time(timestamp)
-- movie_id는 고유한 값이고, movie_name과 genre는 null이 올 수 없다.
-- movie_time의 기본값은 현재 시각이다.
-- 3개 데이터 insert하기

create table movie(
	movie_id int auto_increment primary key comment "영화 id",
	movie_name varchar(50) not null comment "영화 이름",
	genre varchar(20) not null comment "장르",
	movie_time timestamp default current_timestamp comment "생성 날짜"
);

commit;

select * from movie

insert into movie(movie_name, genre) values ("독전", "범죄, 스릴러");
insert into movie(movie_name, genre) values ("해리 포터", "판타지");
insert into movie(movie_name, genre) values ("컨저링2", "공포");

commit;

-- 테이블 2개 만들기
-- 선수 테이블
-- foreign key(외래 키 or 참조 키) : 교집합 할 수 있는 컬럼에 외래키 설정
-- 참조 키는 null이 올 수 있고, index 기능 없음
-- (중요) primary key(pk)는 null이 올 수 없고, foreign key(fk)는 null이 올 수 있다!
create table player(
	player_id int auto_increment primary key comment "선수 번호",
	name varchar(20) not null comment "선수 이름",
	team_id int comment "팀 번호",
	foreign key (team_id) references team(team_id)
);

-- 팀 테이블
create table team(
	team_id int auto_increment primary key comment "팀 번호",
	team_name varchar(50) not null comment "팀 이름"
);

commit;

-- 팀 데이터 추가하기
insert into team(team_name) values("한화 이글스");
insert into team(team_name) values("두산 베어스");
insert into team(team_name) values("롯데 자이언츠");

select * from team

-- 선수 데이터 추가하기
insert into player(name, team_id) values("문동주", 1);
insert into player(name, team_id) values("오재원", 2);
insert into player(name, team_id) values("이대호", 3);

select * from player

-- 문제) 문동주 선수의 팀 이름을 조회하는 SQL문을 작성하시오.
select p.name as "선수 이름", t.team_name as "팀 이름"
from player as p inner join team as t on p.team_id = t.team_id
where p.name = "문동주"

-- 한화 이글스 선수 추가 영입
insert into player(name, team_id) values ("류현진", 1);

-- insert into team(team_id, team_name) values(1, "LG 트윈스");
-- 오류 발생! => team_id = 1번은 이미 한화 이글스가 사용중이기 때문(pk 중복 허용x)

-- (매우 중요) player와 team의 관계를 N:1 관계라고 정의하며, 실무에서 정말 중요하다.
-- JPA같은 기술을 다룰 때

-- 1:N (one to many)
-- ex) 선수와 팀 관계, 사원과 부서 관계, 유저와 서버 관계

-- 1:1 (one to one)
-- ex) 결혼, 군인과 총

-- M:N (many to many) => 실무에서 많이 쓰임
-- ex) 학생과 수강관계(학생 테이블, 과목 테이블, 수강 테이블)
-- M:N은 3개 이상 테이블이 생긴다.
